{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "_ziplongest",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "_ziplongest",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./_ziplongest",
        "raw": "'./_ziplongest'",
        "range": [
          28,
          43
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 43
          }
        }
      },
      "range": [
        0,
        45
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 45
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Same as zip, but continues to yield zipped tuples until the last iterable is\n * exhausted.\n *\n * @example\n * // returns [['A','x'],['B','y'],['C','-'],['D','-']]\n * list( ziplongest( '-' , 'ABCD', 'xy' ) ) ;\n *\n * @param fillvalue - The value to yield for iterators that are exhausted.\n * @param {...Iterable} iterables - The iterables to zip.\n * @returns {Iterator}\n *\n ",
          "range": [
            47,
            427
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "ziplongest",
          "range": [
            444,
            454
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 16
            },
            "end": {
              "line": 16,
              "column": 26
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "fillvalue",
            "range": [
              457,
              466
            ],
            "loc": {
              "start": {
                "line": 16,
                "column": 29
              },
              "end": {
                "line": 16,
                "column": 38
              }
            }
          },
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "iterables",
              "range": [
                472,
                481
              ],
              "loc": {
                "start": {
                  "line": 16,
                  "column": 44
                },
                "end": {
                  "line": 16,
                  "column": 53
                }
              }
            },
            "range": [
              469,
              481
            ],
            "loc": {
              "start": {
                "line": 16,
                "column": 41
              },
              "end": {
                "line": 16,
                "column": 53
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "_ziplongest",
                  "range": [
                    495,
                    506
                  ],
                  "loc": {
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "fillvalue",
                    "range": [
                      508,
                      517
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 21
                      },
                      "end": {
                        "line": 18,
                        "column": 30
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "iterables",
                    "range": [
                      520,
                      529
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 33
                      },
                      "end": {
                        "line": 18,
                        "column": 42
                      }
                    }
                  }
                ],
                "range": [
                  495,
                  531
                ],
                "loc": {
                  "start": {
                    "line": 18,
                    "column": 8
                  },
                  "end": {
                    "line": 18,
                    "column": 44
                  }
                }
              },
              "range": [
                488,
                533
              ],
              "loc": {
                "start": {
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "line": 18,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            484,
            536
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 56
            },
            "end": {
              "line": 20,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          435,
          536
        ],
        "loc": {
          "start": {
            "line": 16,
            "column": 7
          },
          "end": {
            "line": 20,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Same as zip, but continues to yield zipped tuples until the last iterable is\n * exhausted.\n *\n * @example\n * // returns [['A','x'],['B','y'],['C','-'],['D','-']]\n * list( ziplongest( '-' , 'ABCD', 'xy' ) ) ;\n *\n * @param fillvalue - The value to yield for iterators that are exhausted.\n * @param {...Iterable} iterables - The iterables to zip.\n * @returns {Iterator}\n *\n ",
            "range": [
              47,
              427
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 15,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        428,
        536
      ],
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Same as zip, but continues to yield zipped tuples until the last iterable is\n * exhausted.\n *\n * @example\n * // returns [['A','x'],['B','y'],['C','-'],['D','-']]\n * list( ziplongest( '-' , 'ABCD', 'xy' ) ) ;\n *\n * @param fillvalue - The value to yield for iterators that are exhausted.\n * @param {...Iterable} iterables - The iterables to zip.\n * @returns {Iterator}\n *\n ",
          "range": [
            47,
            427
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    536
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 20,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Same as zip, but continues to yield zipped tuples until the last iterable is\n * exhausted.\n *\n * @example\n * // returns [['A','x'],['B','y'],['C','-'],['D','-']]\n * list( ziplongest( '-' , 'ABCD', 'xy' ) ) ;\n *\n * @param fillvalue - The value to yield for iterators that are exhausted.\n * @param {...Iterable} iterables - The iterables to zip.\n * @returns {Iterator}\n *\n ",
      "range": [
        47,
        427
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    }
  ]
}