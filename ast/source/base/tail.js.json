{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "deque",
            "range": [
              9,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "deque",
            "range": [
              9,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "range": [
            9,
            14
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 14
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "aureooms-js-collections",
        "raw": "'aureooms-js-collections'",
        "range": [
          22,
          47
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 22
          },
          "end": {
            "line": 1,
            "column": 47
          }
        }
      },
      "range": [
        0,
        49
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 49
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "iter",
            "range": [
              60,
              64
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 13
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "iter",
            "range": [
              60,
              64
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 13
              }
            }
          },
          "range": [
            60,
            64
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 13
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./iter",
        "raw": "'./iter'",
        "range": [
          72,
          80
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 21
          },
          "end": {
            "line": 3,
            "column": 29
          }
        }
      },
      "range": [
        51,
        82
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 31
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "drop",
            "range": [
              92,
              96
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 13
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "drop",
            "range": [
              92,
              96
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 13
              }
            }
          },
          "range": [
            92,
            96
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 13
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./drop",
        "raw": "'./drop'",
        "range": [
          104,
          112
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 21
          },
          "end": {
            "line": 4,
            "column": 29
          }
        }
      },
      "range": [
        83,
        114
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 31
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns the last <code>n</code> elements of the input iterable in an array.\n * If <code>n</code> is negative, behaves like <code>{@link drop}( iterable,\n * -n)</code>.\n *\n * @example\n * // returns [ 3 , 4 ]\n * list( tail( range( 5 ) , 2 ) ) ;\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Number} n - The number of elements to include in the output.\n * @returns {Array} - The last <code>n</code> elements of the input iterable.\n ",
          "range": [
            116,
            574
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "tail",
          "range": [
            592,
            596
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 17
            },
            "end": {
              "line": 19,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "iterable",
            "range": [
              599,
              607
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 24
              },
              "end": {
                "line": 19,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "n",
            "range": [
              610,
              611
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 35
              },
              "end": {
                "line": 19,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "<",
                "left": {
                  "type": "Identifier",
                  "name": "n",
                  "range": [
                    623,
                    624
                  ],
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 6
                    },
                    "end": {
                      "line": 21,
                      "column": 7
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "range": [
                    627,
                    628
                  ],
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 21,
                      "column": 11
                    }
                  }
                },
                "range": [
                  623,
                  628
                ],
                "loc": {
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 21,
                    "column": 11
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "YieldExpression",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "drop",
                          "range": [
                            642,
                            646
                          ],
                          "loc": {
                            "start": {
                              "line": 22,
                              "column": 9
                            },
                            "end": {
                              "line": 22,
                              "column": 13
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "iterable",
                            "range": [
                              648,
                              656
                            ],
                            "loc": {
                              "start": {
                                "line": 22,
                                "column": 15
                              },
                              "end": {
                                "line": 22,
                                "column": 23
                              }
                            }
                          },
                          {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                              "type": "Identifier",
                              "name": "n",
                              "range": [
                                660,
                                661
                              ],
                              "loc": {
                                "start": {
                                  "line": 22,
                                  "column": 27
                                },
                                "end": {
                                  "line": 22,
                                  "column": 28
                                }
                              }
                            },
                            "prefix": true,
                            "range": [
                              659,
                              661
                            ],
                            "loc": {
                              "start": {
                                "line": 22,
                                "column": 26
                              },
                              "end": {
                                "line": 22,
                                "column": 28
                              }
                            }
                          }
                        ],
                        "range": [
                          642,
                          663
                        ],
                        "loc": {
                          "start": {
                            "line": 22,
                            "column": 9
                          },
                          "end": {
                            "line": 22,
                            "column": 30
                          }
                        }
                      },
                      "delegate": true,
                      "range": [
                        635,
                        663
                      ],
                      "loc": {
                        "start": {
                          "line": 22,
                          "column": 2
                        },
                        "end": {
                          "line": 22,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      635,
                      665
                    ],
                    "loc": {
                      "start": {
                        "line": 22,
                        "column": 2
                      },
                      "end": {
                        "line": 22,
                        "column": 32
                      }
                    }
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": null,
                    "range": [
                      668,
                      676
                    ],
                    "loc": {
                      "start": {
                        "line": 23,
                        "column": 2
                      },
                      "end": {
                        "line": 23,
                        "column": 10
                      }
                    }
                  }
                ],
                "range": [
                  631,
                  679
                ],
                "loc": {
                  "start": {
                    "line": 21,
                    "column": 14
                  },
                  "end": {
                    "line": 24,
                    "column": 2
                  }
                }
              },
              "alternate": null,
              "range": [
                618,
                679
              ],
              "loc": {
                "start": {
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "line": 24,
                  "column": 2
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "YieldExpression",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "deque",
                    "range": [
                      689,
                      694
                    ],
                    "loc": {
                      "start": {
                        "line": 26,
                        "column": 8
                      },
                      "end": {
                        "line": 26,
                        "column": 13
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "iterable",
                      "range": [
                        696,
                        704
                      ],
                      "loc": {
                        "start": {
                          "line": 26,
                          "column": 15
                        },
                        "end": {
                          "line": 26,
                          "column": 23
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "n",
                      "range": [
                        707,
                        708
                      ],
                      "loc": {
                        "start": {
                          "line": 26,
                          "column": 26
                        },
                        "end": {
                          "line": 26,
                          "column": 27
                        }
                      }
                    }
                  ],
                  "range": [
                    689,
                    710
                  ],
                  "loc": {
                    "start": {
                      "line": 26,
                      "column": 8
                    },
                    "end": {
                      "line": 26,
                      "column": 29
                    }
                  }
                },
                "delegate": true,
                "range": [
                  682,
                  710
                ],
                "loc": {
                  "start": {
                    "line": 26,
                    "column": 1
                  },
                  "end": {
                    "line": 26,
                    "column": 29
                  }
                }
              },
              "range": [
                682,
                712
              ],
              "loc": {
                "start": {
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "line": 26,
                  "column": 31
                }
              }
            }
          ],
          "range": [
            614,
            715
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 39
            },
            "end": {
              "line": 28,
              "column": 1
            }
          }
        },
        "generator": true,
        "expression": false,
        "range": [
          582,
          715
        ],
        "loc": {
          "start": {
            "line": 19,
            "column": 7
          },
          "end": {
            "line": 28,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Returns the last <code>n</code> elements of the input iterable in an array.\n * If <code>n</code> is negative, behaves like <code>{@link drop}( iterable,\n * -n)</code>.\n *\n * @example\n * // returns [ 3 , 4 ]\n * list( tail( range( 5 ) , 2 ) ) ;\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Number} n - The number of elements to include in the output.\n * @returns {Array} - The last <code>n</code> elements of the input iterable.\n ",
            "range": [
              116,
              574
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        575,
        715
      ],
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns the last <code>n</code> elements of the input iterable in an array.\n * If <code>n</code> is negative, behaves like <code>{@link drop}( iterable,\n * -n)</code>.\n *\n * @example\n * // returns [ 3 , 4 ]\n * list( tail( range( 5 ) , 2 ) ) ;\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Number} n - The number of elements to include in the output.\n * @returns {Array} - The last <code>n</code> elements of the input iterable.\n ",
          "range": [
            116,
            574
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    715
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 28,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Returns the last <code>n</code> elements of the input iterable in an array.\n * If <code>n</code> is negative, behaves like <code>{@link drop}( iterable,\n * -n)</code>.\n *\n * @example\n * // returns [ 3 , 4 ]\n * list( tail( range( 5 ) , 2 ) ) ;\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Number} n - The number of elements to include in the output.\n * @returns {Array} - The last <code>n</code> elements of the input iterable.\n ",
      "range": [
        116,
        574
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 3
        }
      }
    }
  ]
}